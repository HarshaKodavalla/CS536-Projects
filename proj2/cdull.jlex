///////////////////////////////////////////////////////////////////////////////
//                   ALL STUDENTS COMPLETE THESE SECTIONS
// Main Class File:  P2.java
// File:             cdull.jlex
// Semester:         CS537 Fall 2018
//
// Author:           Harsha Kodavalla kodavalla@wisc.edu
// CS Login:         harsha
// Lecturer's Name:  Aws Albarghouthi
// Lab Section:      (your lab section number)
//
//////////////////// PAIR PROGRAMMERS COMPLETE THIS SECTION ////////////////////
//
// Pair Partner:     (name of your pair programming partner)
// Email:            (email address of your programming partner)
// CS Login:         (partner's login name)
// Lecturer's Name:  (name of your partner's lecturer)
// Lab Section:      (your partner's lab section number)
//
//////////////////// STUDENTS WHO GET HELP FROM OTHER THAN THEIR PARTNER //////
//                   fully acknowledge and credit all sources of help,
//                   other than Instructors and TAs.
//
// Persons:          Identify persons by name, relationship to you, and email.
//                   Describe in detail the the ideas and help they provided.
//
// Online sources:   avoid web searches to solve your problems, but if you do
//                   search, be sure to include Web URLs and description of 
//                   of any information you find.
//////////////////////////// 80 columns wide //////////////////////////////////

import java_cup.runtime.*; // defines the Symbol class

// The generated scanner will return a Symbol for each token that it finds.
// A Symbol contains an Object field named value; that field will be of type
// TokenVal, defined below.
//
// A TokenVal object contains the line number on which the token occurs as
// well as the number of the character on that line that starts the token.
// Some tokens (literals and IDs) also include the value of the token.

class TokenVal {
  // fields
    int linenum;
    int charnum;
  // constructor
    TokenVal(int line, int ch) {
        linenum = line;
        charnum = ch;
    }
}

class IntLitTokenVal extends TokenVal {
  // new field: the value of the integer literal
    int intVal;
  // constructor
    IntLitTokenVal(int line, int ch, int val) {
        super(line, ch);
        intVal = val;
    }
}

class IdTokenVal extends TokenVal {
  // new field: the value of the identifier
    String idVal;
  // constructor
    IdTokenVal(int line, int ch, String val) {
        super(line, ch);
    idVal = val;
    }
}

class StrLitTokenVal extends TokenVal {
  // new field: the value of the string literal
    String strVal;
  // constructor
    StrLitTokenVal(int line, int ch, String val) {
        super(line, ch);
        strVal = val;
    }
}

// The following class is used to keep track of the character number at which
// the current token starts on its line.
class CharNum {
    static int num=1;
}

%%
%{
  String str = "";  // String to be returned in case of string literal
  // booleans used to track states for use in the case of EOF
  boolean stringState = false;
  boolean invalidString = false;
%}

LETTER=       [a-zA-z]
DIGIT=        [0-9]
WHITESPACE=   [\040\t]  // space and tab
NEWLINE=      [\n]
%implements java_cup.runtime.Scanner
%function next_token
%type java_cup.runtime.Symbol

%eofval{
  // If EOF is reached in string, print error
  if (stringState) {
    stringState = false;
    ErrMsg.fatal(yyline+1, CharNum.num,
                        "unterminated string literal ignored");
  // If EOF is reached in an invalid string, print error
  } else if (invalidString) {
    invalidString = false;
    ErrMsg.fatal(yyline+1, CharNum.num,
                      "unterminated string literal with bad escaped character ignored");
  }
  return new Symbol(sym.EOF);
%eofval}

%line

%state STRING INVALID

%%

<YYINITIAL> [/][/][/].* {}
<YYINITIAL> [#][#].* {}

<YYINITIAL> \"  {
  str += '\"';
  yybegin(STRING);
  stringState = true;
}

<STRING>  \"  {
  yybegin(YYINITIAL);
  stringState = false;
  str += '\"';
  Symbol S = new Symbol(sym.STRINGLITERAL, new StrLitTokenVal(yyline+1, 
                                            CharNum.num, str.toString()));
  str = "";
  CharNum.num += yytext().length();
  return S;
}

<STRING>  \\n   { str += "\\n"; }
<STRING>  \\t   { str += "\\t"; }
<STRING>  \\\\  { str += "\\\\"; }
<STRING>  \\\"  { str += "\\\""; }
<STRING>  \\\'  { str += "\\\'"; }
<STRING>  \\[?]   { str += "\\?"; }

<STRING> {NEWLINE}  {
  yybegin(YYINITIAL);
  stringState = false;
  ErrMsg.fatal(yyline+1, CharNum.num,
      "unterminated string literal ignored");
  CharNum.num = 1;
}

<STRING> [\\]   { 
  yybegin(INVALID); 
  stringState = false;
  invalidString = true;
}

<STRING>  . { str += yytext(); }

<INVALID> \"  {
  yybegin(YYINITIAL);
  invalidString = false;
  stringState = false;
  ErrMsg.fatal(yyline+1, CharNum.num,
                "string literal with bad escaped character ignored");
  str = "";
}

<INVALID> {NEWLINE} {
  yybegin(YYINITIAL);
  invalidString = false;
  ErrMsg.fatal(yyline+1, CharNum.num,
                "unterminated string literal with bad escaped character ignored");
  str = "";
  CharNum.num = 1;
}

<INVALID> . {}

<YYINITIAL> [b][o][o][l]  { 
  Symbol S = new Symbol(sym.BOOL, new TokenVal(yyline+1, CharNum.num));
  CharNum.num += yytext().length();
  return S;
}

<YYINITIAL> [i][n][t] {
  Symbol S = new Symbol(sym.INT, new TokenVal(yyline+1, CharNum.num));
  CharNum.num += yytext().length();
  return S;

}

<YYINITIAL> [v][o][i][d] {
  Symbol S = new Symbol(sym.VOID, new TokenVal(yyline+1, CharNum.num));
  CharNum.num += yytext().length();
  return S;
}

<YYINITIAL> [t][r][u][e] {
  Symbol S = new Symbol(sym.TRUE, new TokenVal(yyline+1, CharNum.num));
  CharNum.num += yytext().length();
  return S;
}

<YYINITIAL> [f][a][l][s][e] {
  Symbol S = new Symbol(sym.FALSE, new TokenVal(yyline+1, CharNum.num));
  CharNum.num += yytext().length();
  return S;
}

<YYINITIAL> [s][t][r][u][c][t]  {
  Symbol S = new Symbol(sym.STRUCT, new TokenVal(yyline+1, CharNum.num));
  CharNum.num += yytext().length();
  return S;
}

<YYINITIAL> [c][i][n] {
  Symbol S = new Symbol(sym.CIN, new TokenVal(yyline+1, CharNum.num));
  CharNum.num += yytext().length();
  return S;
}

<YYINITIAL> [c][o][u][t] {
  Symbol S = new Symbol(sym.COUT, new TokenVal(yyline+1, CharNum.num));
  CharNum.num += yytext().length();
  return S;
}

<YYINITIAL> [i][f] {
  Symbol S = new Symbol(sym.IF, new TokenVal(yyline+1, CharNum.num));
  CharNum.num += yytext().length();
  return S;
}

<YYINITIAL> [e][l][s][e] {
  Symbol S = new Symbol(sym.ELSE, new TokenVal(yyline+1, CharNum.num));
  CharNum.num += yytext().length();
  return S;
}

<YYINITIAL> [w][h][i][l][e] {
  Symbol S = new Symbol(sym.WHILE, new TokenVal(yyline+1, CharNum.num));
  CharNum.num += yytext().length();
  return S;
}

<YYINITIAL> [r][e][t][u][r][n] {
  Symbol S = new Symbol(sym.RETURN, new TokenVal(yyline+1, CharNum.num));
  CharNum.num += yytext().length();
  return S;
}

<YYINITIAL> [\{] {
  Symbol S = new Symbol(sym.LCURLY, new TokenVal(yyline+1, CharNum.num));
  CharNum.num += yytext().length();
  return S;
}

<YYINITIAL> [}] {
  Symbol S = new Symbol(sym.RCURLY, new TokenVal(yyline+1, CharNum.num));
  CharNum.num += yytext().length();
  return S;
}

<YYINITIAL> [(] {
  Symbol S = new Symbol(sym.LPAREN, new TokenVal(yyline+1, CharNum.num));
  CharNum.num += yytext().length();
  return S;
}

<YYINITIAL> [)] {
  Symbol S = new Symbol(sym.RPAREN, new TokenVal(yyline+1, CharNum.num));
  CharNum.num += yytext().length();
  return S;
}

<YYINITIAL> [;] {
  Symbol S = new Symbol(sym.SEMICOLON, new TokenVal(yyline+1, CharNum.num));
  CharNum.num += yytext().length();
  return S;
}

<YYINITIAL> [,] {
  Symbol S = new Symbol(sym.COMMA, new TokenVal(yyline+1, CharNum.num));
  CharNum.num += yytext().length();
  return S;
}

<YYINITIAL> [.] {
  Symbol S = new Symbol(sym.DOT, new TokenVal(yyline+1, CharNum.num));
  CharNum.num += yytext().length();
  return S;
}

<YYINITIAL> [<][<]  {
  Symbol S = new Symbol(sym.WRITE, new TokenVal(yyline+1, CharNum.num));
  CharNum.num += yytext().length();
  return S;
}

<YYINITIAL> [>][>]  {
  Symbol S = new Symbol(sym.READ, new TokenVal(yyline+1, CharNum.num));
  CharNum.num += yytext().length();
  return S;
}

<YYINITIAL> [+][+]  {
  Symbol S = new Symbol(sym.PLUSPLUS, new TokenVal(yyline+1, CharNum.num));
  CharNum.num += yytext().length();
  return S;
}

<YYINITIAL> [-][-]  {
  Symbol S = new Symbol(sym.MINUSMINUS, new TokenVal(yyline+1, CharNum.num));
  CharNum.num += yytext().length();
  return S;
}

<YYINITIAL> [+] {
  Symbol S = new Symbol(sym.PLUS, new TokenVal(yyline+1, CharNum.num));
  CharNum.num += yytext().length();
  return S;
}

<YYINITIAL> [-] {
  Symbol S = new Symbol(sym.MINUS, new TokenVal(yyline+1, CharNum.num));
  CharNum.num += yytext().length();
  return S;
}

<YYINITIAL> [*] {
  Symbol S = new Symbol(sym.TIMES, new TokenVal(yyline+1, CharNum.num));
  CharNum.num += yytext().length();
  return S;
}

<YYINITIAL> [/] {
  Symbol S = new Symbol(sym.DIVIDE, new TokenVal(yyline+1, CharNum.num));
  CharNum.num += yytext().length();
  return S;
}

<YYINITIAL> [!] {
  Symbol S = new Symbol(sym.NOT, new TokenVal(yyline+1, CharNum.num));
  CharNum.num += yytext().length();
  return S;
}

<YYINITIAL> [&][&]  {
  Symbol S = new Symbol(sym.AND, new TokenVal(yyline+1, CharNum.num));
  CharNum.num += yytext().length();
  return S;
}

<YYINITIAL> [|][|]  {
  Symbol S = new Symbol(sym.OR, new TokenVal(yyline+1, CharNum.num));
  CharNum.num += yytext().length();
  return S;
}

<YYINITIAL> [=][=]  {
  Symbol S = new Symbol(sym.EQUALS, new TokenVal(yyline+1, CharNum.num));
  CharNum.num += yytext().length();
  return S;
}

<YYINITIAL> [!][=]  {
  Symbol S = new Symbol(sym.NOTEQUALS, new TokenVal(yyline+1, CharNum.num));
  CharNum.num += yytext().length();
  return S;
}

<YYINITIAL> [<] {
  Symbol S = new Symbol(sym.LESS, new TokenVal(yyline+1, CharNum.num));
  CharNum.num += yytext().length();
  return S;
}

<YYINITIAL> [>] {
  Symbol S = new Symbol(sym.GREATER, new TokenVal(yyline+1, CharNum.num));
  CharNum.num += yytext().length();
  return S;
}

<YYINITIAL> [<][=]  {
  Symbol S = new Symbol(sym.LESSEQ, new TokenVal(yyline+1, CharNum.num));
  CharNum.num += yytext().length();
  return S;
}

<YYINITIAL> [>][=]  {
  Symbol S = new Symbol(sym.GREATEREQ, new TokenVal(yyline+1, CharNum.num));
  CharNum.num += yytext().length();
  return S;
}

<YYINITIAL> [=] {
  Symbol S = new Symbol(sym.ASSIGN, new TokenVal(yyline+1, CharNum.num));
  CharNum.num += yytext().length();
  return S;
}

<YYINITIAL> [a-zA-z_]+[a-zA-z0-9_]* {
  Symbol S = new Symbol(sym.ID , new IdTokenVal(yyline+1, 
                                        CharNum.num, yytext()));
  CharNum.num += yytext().length();
  return S;
}

<YYINITIAL> {DIGIT}+  {
  double d = (new Double(yytext())).doubleValue(); // convert String to double
  if (d > Integer.MAX_VALUE) {
    ErrMsg.warn(yyline+1, CharNum.num, 
                "integer literal too large; using max value");
    Symbol S = new Symbol(sym.INTLITERAL, new IntLitTokenVal(yyline+1, CharNum.num, Integer.MAX_VALUE));
    CharNum.num += yytext().length();
    return S;
  }
  int val = (new Integer(yytext())).intValue();
  Symbol S = new Symbol(sym.INTLITERAL,
  new IntLitTokenVal(yyline+1, CharNum.num, val));
  CharNum.num += yytext().length();
  return S;
}


<YYINITIAL> \n  { CharNum.num = 1; }

<YYINITIAL> {WHITESPACE}+  { CharNum.num += yytext().length(); }
        
<YYINITIAL> . { 
  ErrMsg.fatal(yyline+1, CharNum.num,
                  "ignoring illegal character: " + yytext());
  CharNum.num += yytext().length();
}
